---
extra_includes:
- wpiutil_converters.hpp
- networktables/NetworkTableType.h

classes:
  Value:
    methods:
      Value:
        overloads:
          "":
          NT_Type, uint64_t, Value::private_init:
            ignore: true
      type:
        cpp_code: |
          [](Value *t) {
            return (NetworkTableType)t->type();
          }
      value:
        cpp_code: |
          [](Value * t) -> py::object {
            auto v = t->value();
            switch (v.type) {
            case NT_BOOLEAN:
              return py::bool_(v.data.v_boolean);

            case NT_DOUBLE:
              return py::float_(v.data.v_double);

            case NT_STRING:
              return py::str(v.data.v_string.str, v.data.v_string.len);

            case NT_RAW:
              return py::bytes(v.data.v_string.str, v.data.v_string.len);

            case NT_BOOLEAN_ARRAY: {
              py::list l(v.data.arr_boolean.size);
              for (size_t i = 0; i < v.data.arr_boolean.size; i++) {
                auto b = py::bool_(v.data.arr_boolean.arr[i]);
                PyList_SET_ITEM(l.ptr(), i, b.release().ptr());
              }
              return l;
            }

            case NT_DOUBLE_ARRAY: {
              py::list l(v.data.arr_double.size);
              for (size_t i = 0; i < v.data.arr_double.size; i++) {
                auto d = py::float_(v.data.arr_double.arr[i]);
                PyList_SET_ITEM(l.ptr(), i, d.release().ptr());
              }
              return l;
            }
            
            case NT_STRING_ARRAY: {
              py::list l(v.data.arr_string.size);
              for (size_t i = 0; i < v.data.arr_string.size; i++) {
                auto s = py::str(v.data.arr_string.arr[i].str, v.data.arr_string.arr[i].len);
                PyList_SET_ITEM(l.ptr(), i, s.release().ptr());
              }
              return l;
            }

            default:
              return py::none();
            }
          }
      last_change:
      time:
      IsValid:
      IsBoolean:
      IsDouble:
      IsString:
      IsRaw:
      IsRpc:
      IsBooleanArray:
      IsDoubleArray:
      IsStringArray:
      GetBoolean:
      GetDouble:
      GetString:
      GetRaw:
      GetRpc:
      GetBooleanArray:
          cpp_code: |
              [](Value *t) -> py::object {
                auto v = t->value();
                py::list l(v.data.arr_boolean.size);
                for (size_t i = 0; i < v.data.arr_boolean.size; i++) {
                  auto b = py::bool_(v.data.arr_boolean.arr[i]);
                  PyList_SET_ITEM(l.ptr(), i, b.release().ptr());
                }
                return l;
              }
      GetDoubleArray:
      GetStringArray:
      MakeBoolean:
      MakeDouble:
      MakeString:
        overloads:
          wpi::Twine&, uint64_t:
          T&&, uint64_t:
            ignore: true
      MakeRaw:
        overloads:
          wpi::StringRef, uint64_t:
          T&&, uint64_t:
            ignore: true
      MakeRpc:
        overloads:
          wpi::StringRef, uint64_t:
          T&&, uint64_t:
            ignore: true
      MakeBooleanArray:
        overloads:
          ArrayRef<bool>, uint64_t:
          ArrayRef<int>, uint64_t:
            ignore: true
          std::initializer_list<bool>, uint64_t:
            ignore: true
          std::initializer_list<int>, uint64_t:
            ignore: true
      MakeDoubleArray:
        overloads:
          ArrayRef<double>, uint64_t:
          std::initializer_list<double>, uint64_t:
            ignore: true
      MakeStringArray:
        overloads:
          ArrayRef<std::string>, uint64_t:
            ignore: true
          std::vector<std::string>&&, uint64_t:
          std::initializer_list<std::string>, uint64_t:
            ignore: true

  private_init:
    ignore: true
